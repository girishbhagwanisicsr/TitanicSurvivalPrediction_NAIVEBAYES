# -*- coding: utf-8 -*-
"""TitanicSurvivalPrediction_NAIVEBAYES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10QsUdGnE2LJ_SRRag563eiFRIWcp5TPT

**Titanic Survival Prediction Using NAIVE BAYES**

**Importing Basic Libraries**
"""

import pandas as pd
import numpy as np

"""**Choose Dataset File from Directory**"""

from google.colab import files
uploaded = files.upload()

"""**Load DataSet**"""

dataset = pd.read_csv('Titanicsurvivaldata1.csv')

"""**Summarize Dataset**"""

print(dataset.shape)
 print(dataset.head(5))

dataset.columns

"""**Mapping Text Data to Binary Value**"""

income_set = set(dataset['Sex'])
dataset['Sex'] = dataset['Sex'].map({'female' : 0,'male':1}).astype(int)
print(dataset)

"""**Segregate Dataset into X(input/IndependentVariable) & Y(Output/DependentVariable)**"""

dataset.columns

X = dataset.drop('Survived',axis ='columns')
X

Y = dataset.Survived
Y

"""**Finding & Removing NA values From our Features X**"""

X.columns[X.isna().any()]

X.Age = X.Age.fillna(X.Age.mean())

"""**Splitting Dataset into Train & Test**"""

from sklearn.model_selection import train_test_split
X_train, X_test,y_train, y_test = train_test_split(X,Y,test_size =0.25,random_state =0)

"""**Training**"""

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit( X_train , y_train )

"""**Predicting whether Person Survived or Not**"""

Pclass =int(input("Enter the P Class of person"))
Gender = int(input("Enter 0 for Female and 1 For Male"))
Age = int(input("Enter the Age of Person "))
p_fare = float(input("Enter the Person's Fare "))
person = [[Gender,Age,Pclass,p_fare]]
result = model.predict(person)
print(result)

if result ==1:
  print("Person Might be survived")
else:
  print("Person Might not be survived")

"""**Prediction For All Test Data**"""

y_pred = model.predict(X_test)
print(np.column_stack((y_pred,y_test)))

"""**Accuracy of our model**"""

from sklearn.metrics import accuracy_score
print("Accuracy of the model: {0}% ".format(accuracy_score(y_test,y_pred)*100))